pipeline {
    agent any
    tools {
        maven 'Maven' // Gunakan nama konfigurasi Maven dari Jenkins
        jdk 'JDK23'
    }
    environment {
        SONARQUBE_URL = 'http://localhost:9000'
        SONAR_TOKEN = credentials('sonarqube') // Token SonarQube di Jenkins
        PROJECT_KEY = 'crm-pro'
        JACOCO_TARGET = 'target/site/jacoco/jacoco.xml'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'anggiat/crm-app'
        DOCKER_CREDENTIALS = credentials('docker-credential')
    }

    stages {
        stage('Git Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']],
                                extensions: [],
                                userRemoteConfigs: [[url: 'https://github.com/anggiat0304/crm.git']])
                echo 'Git Checkout Completed'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn clean test'
                echo 'Build and Test Completed'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=${PROJECT_KEY} \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONAR_TOKEN} \
                        -Dsonar.coverage.jacoco.xmlReportPaths=${JACOCO_TARGET}
                    """
                    echo 'SonarQube Analysis Completed'
                }
            }
        }

        // stage('Check Quality Gate') {
        //     steps {
        //         script {
        //             def qg = waitForQualityGate()
        //             if (qg.status != 'OK') {
        //                 echo "Quality Gate Status: ${qg.status}"
        //                 error "Pipeline stopped due to quality gate failure: ${qg.status}"
        //             }
        //             echo "Quality Gate passed with status: ${qg.status}"
        //         }
        //     }
        // }

        // stage('Check Test Coverage') {
        //     steps {
        //         withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_TOKEN')]) {
        //             script {
        //                 def response = sh(
        //             script: "curl -u ${SONAR_TOKEN}: ${SONARQUBE_URL}/api/measures/component?component=${PROJECT_KEY}&metricKeys=coverage",
        //             returnStdout: true
        //         ).trim()

        //                 // Debug log untuk memeriksa respons API
        //                 echo "SonarQube API Response: ${response}"

        //                 // Parse JSON dan validasi isi response
        //                 def json = new groovy.json.JsonSlurper().parseText(response)
        //                 if (!json.component || !json.component.measures) {
        //                     error "SonarQube API response is invalid or does not contain 'measures'. Response: ${response}"
        //                 }
        //                 def coverage = json.component.measures[0].value.toDouble()

        //                 echo "Test Coverage: ${coverage}%"
        //                 if (coverage < 100) {ÃŸ
        //                     error "Test coverage is less than 100%: ${coverage}%"
        //                 }
        //             }
        //         }
        //     }
        // }
        stage('Build') {
            steps {
                sh 'mvn install'
                echo 'Build and Test Completed'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerTag = "${DOCKER_IMAGE}:${env.BUILD_NUMBER}" // Tambahkan tag dengan nomor build
                    sh """
                        docker build -t ${dockerTag} .
                    """
                    echo "Docker Image Built: ${dockerTag}"
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                withDockerRegistry([usernamePassword(credentialsId: 'docker-credential', usernameVariable: 'anggiat', passwordVariable: 'sitoluama2')]) {
                    script {
                        def dockerTag = "anggiat/crm-app:${env.BUILD_NUMBER}"
                        sh """
                            echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
                            docker push ${dockerTag}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
