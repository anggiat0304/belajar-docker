pipeline {
    agent any
    tools {
        maven 'Maven' // Gunakan nama konfigurasi Maven dari Jenkins
        jdk 'JDK23'
    }
    environment {
        SONARQUBE_URL = 'http://localhost:9000'
        SONAR_TOKEN = credentials('sonarqube') // Token SonarQube di Jenkins
        PROJECT_KEY = 'crm-pro'
        JACOCO_TARGET = 'target/site/jacoco/jacoco.xml'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'anggiat/crm-app'
        DOCKER_PASSWORD = 'sitoluama2'
        DOCKER_USERNAME = 'anggiat'
        DOCKER_CREDENTIALS = credentials('docker-credential')
    }

    stages {
        stage('Git Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']],
                                extensions: [],
                                userRemoteConfigs: [[url: 'https://github.com/anggiat0304/crm.git']])
                echo 'Git Checkout Completed'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install -DSkipTests'
                echo 'Build and Test Completed'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=${PROJECT_KEY} \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONAR_TOKEN} \
                        -Dsonar.coverage.jacoco.xmlReportPaths=${JACOCO_TARGET}
                    """
                    echo 'SonarQube Analysis Completed'
                }
            }
        }
        

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerTag = "${DOCKER_IMAGE}:${env.BUILD_NUMBER}" // Tambahkan tag dengan nomor build
                    sh """
                        docker build -t ${dockerTag} .
                    """
                    echo "Docker Image Built: ${dockerTag}"
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credential', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        def dockerTag = "anggiat/crm-app:latest"
                        sh """
                    echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
                    docker push ${dockerTag} 
                """
                    }
                }
            }
        }
    }

    post {
        // always {
        //     cleanWs()
        // }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
